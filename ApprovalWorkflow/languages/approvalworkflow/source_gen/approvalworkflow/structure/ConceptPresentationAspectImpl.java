package approvalworkflow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Approval;
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_AttributeList;
  private ConceptPresentation props_AttributeReference;
  private ConceptPresentation props_AttributeWithValue;
  private ConceptPresentation props_Category;
  private ConceptPresentation props_CategoryList;
  private ConceptPresentation props_CategoryReference;
  private ConceptPresentation props_Requirement;
  private ConceptPresentation props_Rule;
  private ConceptPresentation props_RuleList;
  private ConceptPresentation props_RuleReference;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_TypeList;
  private ConceptPresentation props_User;
  private ConceptPresentation props_UserList;
  private ConceptPresentation props_UserReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Approval:
        if (props_Approval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Approval");
          props_Approval = cpb.create();
        }
        return props_Approval;
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.AttributeList:
        if (props_AttributeList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AttributeList = cpb.create();
        }
        return props_AttributeList;
      case LanguageConceptSwitch.AttributeReference:
        if (props_AttributeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x49291be038e1f869L, 0x49291be038e1f86aL, "attribute", "", "");
          props_AttributeReference = cpb.create();
        }
        return props_AttributeReference;
      case LanguageConceptSwitch.AttributeWithValue:
        if (props_AttributeWithValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x51d1adf751ca427aL, 0x51d1adf751ca4281L, "attribute", "", "");
          props_AttributeWithValue = cpb.create();
        }
        return props_AttributeWithValue;
      case LanguageConceptSwitch.Category:
        if (props_Category == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Category = cpb.create();
        }
        return props_Category;
      case LanguageConceptSwitch.CategoryList:
        if (props_CategoryList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CategoryList = cpb.create();
        }
        return props_CategoryList;
      case LanguageConceptSwitch.CategoryReference:
        if (props_CategoryReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x49291be038e1f854L, 0x49291be038e1f855L, "category", "", "");
          props_CategoryReference = cpb.create();
        }
        return props_CategoryReference;
      case LanguageConceptSwitch.Requirement:
        if (props_Requirement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Requirement = cpb.create();
        }
        return props_Requirement;
      case LanguageConceptSwitch.Rule:
        if (props_Rule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Rule = cpb.create();
        }
        return props_Rule;
      case LanguageConceptSwitch.RuleList:
        if (props_RuleList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RuleList = cpb.create();
        }
        return props_RuleList;
      case LanguageConceptSwitch.RuleReference:
        if (props_RuleReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x49291be038e1f87bL, 0x49291be038e1f87cL, "rule", "", "");
          props_RuleReference = cpb.create();
        }
        return props_RuleReference;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.TypeList:
        if (props_TypeList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TypeList = cpb.create();
        }
        return props_TypeList;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_User = cpb.create();
        }
        return props_User;
      case LanguageConceptSwitch.UserList:
        if (props_UserList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UserList = cpb.create();
        }
        return props_UserList;
      case LanguageConceptSwitch.UserReference:
        if (props_UserReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x49291be038e1f83dL, 0x49291be038e1f83eL, "user", "", "");
          props_UserReference = cpb.create();
        }
        return props_UserReference;
    }
    return null;
  }
}
