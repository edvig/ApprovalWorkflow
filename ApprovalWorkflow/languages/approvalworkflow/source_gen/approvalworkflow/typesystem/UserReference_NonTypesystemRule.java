package approvalworkflow.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class UserReference_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public UserReference_NonTypesystemRule() {
  }
  public void applyRule(final SNode userReference, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(userReference), CONCEPTS.User$eb), LINKS.superior$REH4)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.user$7rbj), PROPS.name$MnvL), SPropertyOperations.getString(SLinkOperations.getTarget(userReference, LINKS.user$7rbj), PROPS.name$MnvL)) && !(Objects.equals(it, userReference));
      }
    })) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(userReference, SPropertyOperations.getString(SLinkOperations.getTarget(userReference, LINKS.user$7rbj), PROPS.name$MnvL) + " is already a superior", "r:ed2fa535-57ae-431d-9dc9-263e7bfa49b3(approvalworkflow.typesystem)", "8247525492179007062", null, errorTarget);
      }
    }
    if (Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(SLinkOperations.getTarget(userReference, LINKS.user$7rbj), LINKS.superior$REH4), LINKS.user$7rbj)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(it, SNodeOperations.cast(SNodeOperations.getParent(userReference), CONCEPTS.User$eb));
      }
    })) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(userReference, "Two users are superiors of each other", "r:ed2fa535-57ae-431d-9dc9-263e7bfa49b3(approvalworkflow.typesystem)", "8247525492179201438", null, errorTarget);
      }
    }
    if (Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(SLinkOperations.getTarget(userReference, LINKS.user$7rbj), LINKS.superior$REH4), LINKS.user$7rbj)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(it, LINKS.superior$REH4), LINKS.user$7rbj)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Objects.equals(it, SNodeOperations.cast(SNodeOperations.getParent(userReference), CONCEPTS.User$eb));
          }
        });
      }
    })) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(userReference, "Three users are in a superior-loop", "r:ed2fa535-57ae-431d-9dc9-263e7bfa49b3(approvalworkflow.typesystem)", "8247525492179257885", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.UserReference$zN;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept User$eb = MetaAdapterFactory.getConcept(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x16f8cd7a61858813L, "approvalworkflow.structure.User");
    /*package*/ static final SConcept UserReference$zN = MetaAdapterFactory.getConcept(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x49291be038e1f83dL, "approvalworkflow.structure.UserReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink superior$REH4 = MetaAdapterFactory.getContainmentLink(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x16f8cd7a61858813L, 0x49291be038e1f842L, "superior");
    /*package*/ static final SReferenceLink user$7rbj = MetaAdapterFactory.getReferenceLink(0xf4c726b18a9f431cL, 0xa55ad6c1445e5f46L, 0x49291be038e1f83dL, 0x49291be038e1f83eL, "user");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
